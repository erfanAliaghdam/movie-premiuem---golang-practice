// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	entity "movie_premiuem/user/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CheckIfUserExistsByEmail provides a mock function with given fields: Email
func (_m *UserRepository) CheckIfUserExistsByEmail(Email string) (bool, error) {
	ret := _m.Called(Email)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfUserExistsByEmail")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(Email)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(Email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(Email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: Email, Password
func (_m *UserRepository) CreateUser(Email string, Password string) (int64, error) {
	ret := _m.Called(Email, Password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (int64, error)); ok {
		return rf(Email, Password)
	}
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(Email, Password)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(Email, Password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: Email
func (_m *UserRepository) GetUserByEmail(Email string) (entity.User, error) {
	ret := _m.Called(Email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.User, error)); ok {
		return rf(Email)
	}
	if rf, ok := ret.Get(0).(func(string) entity.User); ok {
		r0 = rf(Email)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(Email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateUserByEmailAndPassword provides a mock function with given fields: Email, Password
func (_m *UserRepository) ValidateUserByEmailAndPassword(Email string, Password string) (bool, int64, error) {
	ret := _m.Called(Email, Password)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUserByEmailAndPassword")
	}

	var r0 bool
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, int64, error)); ok {
		return rf(Email, Password)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(Email, Password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) int64); ok {
		r1 = rf(Email, Password)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(Email, Password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
